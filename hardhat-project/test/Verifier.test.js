/**
 * @title verifier test suite
 * @author Anthony Spedaliere
 * @notice Tests for the Groth16Verifier contract implementation in Verifier.sol
 */

// libraries
const { expect } = require("chai");
const { ethers, upgrades } = require("hardhat");

/**
 * @notice Test suite for the Groth16Verifier contract
 * @dev Tests deployment and proof verification functionality
 */

describe("Groth16Verifier", function () {
  let verifier;
  let owner;
  let a, b, c, publicInputs;

  beforeEach(async function () {
    [owner] = await ethers.getSigners();
    const Verifier = await ethers.getContractFactory("Groth16Verifier");
    verifier = await Verifier.deploy();
    await verifier.waitForDeployment();

    // set up the proof data (snarkjs generatecall)
    a = [
      "0x2c7a9eb92acfd22fb128f7f415f568fcd98474669540d3ccb4db7bf20f5c9d54",
      "0x012f5e100e7bf84bf7eb371e75d6f1c5d6ef802682b11633adce55cdf492a29c",
    ];

    b = [
      [
        "0x1327f48ac28e6584ed1bc57c050bee1336d054d4f129abd34b78810f69e0a83b",
        "0x23295195bd2cd186ed07998d08ba08b248d540248f74d6d50c136f0dd4c55181",
      ],
      [
        "0x18d9f0002fa848bda597f2f238e01bd25f04767d5371108045945ff339d1e201",
        "0x1a12dab7f4372a9d47ef1106ce244471b68923de3a557bbdfaac6f5982b07ea3",
      ],
    ];

    c = [
      "0x2d8c302b8a0827360173c437d242b971c459f2116c9a5063593114a014af4d73",
      "0x0fd00554f6b23a4eee37070c765b559a52cbd96b19274b27bfc4c08d8fe05234",
    ];

    publicInputs = [
      "0x0dc3cb30156e5a400fd19cb76a2a2755d6c12e1cd2d0a4c9f1010d413e08282e",
      "0x0000000000000000000000000000000000000000000000000000000000000001",
    ];
  });

  /**
   * @notice Tests that the contract deploys successfully with a valid address
   * @dev Checks that the contract address is a valid Ethereum address
   */
  it("Should deploy successfully", async function () {
    const address = await verifier.getAddress();
    expect(ethers.isAddress(address)).to.be.true;
  });

  /**
   * @notice Tests that the verifier accepts a valid proof
   * @dev Uses the proof generated by snarkjs to verify the circuit's constraints
   */
  it("Should verify a valid proof", async function () {
    const result = await verifier.verifyProof(a, b, c, publicInputs);
    expect(result).to.be.true;
  });

  /**
   * @notice Tests that the verifier rejects an invalid proof
   * @dev Modifies the public input to make the proof invalid
   */
  it("Should reject an invalid proof", async function () {
    const invalidPublicInputs = [
      "0x0dc3cb30156e5a400fd19cb76a2a2755d6c12e1cd2d0a4c9f1010d413e08282f",
      "0x0000000000000000000000000000000000000000000000000000000000000002",
    ];

    const result = await verifier.verifyProof(a, b, c, invalidPublicInputs);
    expect(result).to.be.false;
  });
});
